@Library('itp-pipeline-common-jenkins')
@Library('itp-pipeline-web-jenkins')

def gitUtils = new mobi.inthepocket.utils.GitUtils()
def versionUtils = new mobi.inthepocket.utils.VersionUtils()
def packageUtils = new mobi.inthepocket.utils.PackageUtils()

wrapperNode('docker') {
  def version = ""
  def fullVersion = ""

  if (gitUtils.isFeatureBranch() || gitUtils.isBugfixBranch()) {
    return
  }

  stage('Checkout') {
    sh "printenv"
    checkout scm

    // Parse version number from package.json
    version = packageUtils.getPackageProperty('version')
    fullVersion = versionUtils.getFullVersionName(version)
  }

  stage('Dependencies') {
    sh "make clean VERSION=\"${fullVersion}\""
    sh "make dependencies VERSION=\"${fullVersion}\""
  }

  stage('Build') {
    sh "make build VERSION=\"${fullVersion}\""
  }

  stage('Static Code Analysis') {
    sh "make lint VERSION=\"${fullVersion}\""
    checkstyle canComputeNew: false, defaultEncoding: '', healthy: '', pattern: '', unHealthy: ''
  }

  stage('Tests') {
    try {
      // Use try-block without catching any exceptions
      sh "make test VERSION=\"${fullVersion}\""
    } finally {
      // Publish results, even if tests fail
      junit 'test/test-results.xml'
    }
  }

  stage('SonarQube') {
    withSonarQubeEnv('Sonarqube') {
      sonarQube(version)
    }
  }

  stage('Deploy') {
    if (gitUtils.isDeployBranch()) {
      deployDocker(fullVersion, ['develop': 'staging', 'master': 'production'], 'client-inthepocket/itp-dashboard/itp-dashboard-deploy')
    } else {
      echo "Not a develop, release or master branch. Do not deploy."
    }
  }
}
